# Authentication and Authorization

# Kubernetes clusters have two types of users service accounts and normal users, but normal users are assumed
# to be managed by an outside service. There are no objects to represent them and they cannot be added via an API
# call, but service accounts can be added.
# We will use RBAC to configure access to actions within a namespace for a new contractor, Developer Dan who will be
# working on a new project.

kubectl create ns development

kubectl create ns production

# View the current clusters and context available. The context allows you to configure the cluster to use, namespace and
# user for kubectl commands in an easy and consistent manner.

kubectl config get-contexts

# Create a new user DevDan and assign a password of password

useradd -s /bin/bash DevDan
passwd DevDan

# Generate a private key then Certificate Signing Request (CSR) for DevDan. On some Ubuntu 18.04 nodes a missing file
# may cause an error with random number generation. The touch command should ensure one way of success.

openssl genrsa -out DevDan.key 2048

touch $HOME/.rnd

openssl req -new -key DevDan.key -out DevDan.csr -subj "/CN=DevDan/O=development"

# Using thew newly created request generate a self-signed certificate using the x509 protocol. Use the CA keys for the
# Kubernetes cluster and set a 45 day expiration. You’ll need to use sudo to access to the inbound files.

openssl x509 -req -in DevDan.csr \
-CA /etc/kubernetes/pki/ca.crt \
-CAkey /etc/kubernetes/pki/ca.key \
-CAcreateserial \
-out DevDan.crt -days 45

# Update the access config file to reference the new key and certificate. Normally we would move them to a safe directory
# instead of a non-root user’s home.

kubectl config set-credentials DevDan \
--client-certificate=/home/student/DevDan.crt \
--client-key=/home/student/DevDan.key

# View the update to your credentials file. Use diff to compare against the copy we made earlier.

diff cluster-api-config .kube/config

# We will now create a context. For this we will need the name of the cluster, namespace and CN of the user we set or
# saw in previous steps.

kubectl config set-context DevDan-context \
--cluster=kubernetes \
--namespace=development \
--user=DevDan

# Attempt to view the Pods inside the DevDan-context. Be aware you will get an error

kubectl --context=DevDan-context get pods

kubectl config get-contexts

# check the recent changes to the cluster access config file
diff cluster-api-config .kube/config

# We will now create a YAML file to associate RBAC rights to a particular namespace and Role.

vim role-dev.yaml
"""
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: development
  name: developer
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods"]
    verbs: ["list", "get", "watch", "create", "update", "patch", "delete"]
    # You can use ["*"] for all verbs
"""

# Create the object. Check white space and for typos if you encounter errors

kubectl create -f role-dev.yaml

# Now we create a RoleBinding to associate the Role we just created with a user. Create the object when the file has
# been created.

vim rolebind.yaml
"""
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developer-role-binding
  namespace: development
subjects:
  - kind: User
    name: DevDan
    apiGroup: ""
  roleRef:
    kind: Role
    name: developer
    apiGroup: ""
"""

kubectl create -f rolebind.yaml

# Test the context again. This time it should work. There are no Pods running so you should get a response of No
# resources found.

kubectl --context=DevDan-context get pods

# Create a new pod, verify it exists, then delete it

kubectl --context=DevDan-context create deployment nginx --image=nginx
kubectl --context=DevDan-context get pods
kubectl --context=DevDan-context delete deploy nginx

# We will now create a different context for production systems. The Role will only have the ability to view, but not create
# or delete resources. Begin by copying and editing the Role and RoleBindings YAML files.

cp role-dev.yaml role-prod.yaml
vim role-prod.yaml
"""
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: production   #<<- This line
  name: dev-prod   #<<- and this line
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["deployments", "replicasets", "pods"]
    verbs: ["get", "list", "watch"] #<<- and this one
"""

cp rolebind.yaml rolebindprod.yaml
vim rolebindprod.yaml
"""
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-role-binding   #<-- Edit to production
  namespace: production    #<-- Also here
subjects:
- kind: User
  name: DevDan
  apiGroup: ""
roleRef:
  kind: Role
  name: dev-prod   #<-- Also this
  apiGroup: ""
"""

kubectl create -f role-prod.yaml
kubectl create -f rolebindprod.yaml

# Create the new context for production use.
kubectl config set-context ProdDan-context \
--cluster=kubernetes \
--namespace=production \
--user=DevDan

# Verify that user DevDan can view pods using the new context.
kubectl --context=ProdDan-context get pods

# Try to create a Pod in production. The developer should be Forbidden
kubectl --context=ProdDan-context create \
deployment nginx --image=nginx

kubectl -n production describe role dev-prod

# Experiment with other subcommands in both contexts. They should match those listed in the respective roles

# OPTIONAL CHALLENGE STEP: Become the DevDan user. Solve any missing configuration errors. Try to create
# a deployment in the development and the production namespaces. Do the errors look the same? Configure as
# necessary to only have two contexts available to DevDan

kubectl config get-contexts



